name: CI

on:
  push:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      # Vérifier le code du dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # Installer Composer pour la gestion des dépendances
      - name: Install Composer
        uses: php-actions/composer@v6
        with:
          php_version: "8.2"  # Spécifier PHP 8.2

      # Exécuter les tests PHPUnit avec couverture de code en texte
      - name: Run PHPUnit tests with coverage (text and cobertura)
        uses: php-actions/phpunit@v3
        env:
          XDEBUG_MODE: coverage
        with:
          php_version: "8.2"  # Spécifier PHP 8.2
          version: "9.6.11"  # Spécifier PHPUnit 9.6.11
          php_extensions: "xdebug pdo mbstring xml curl sqlite3 pdo-sqlite gd"  # Ajouter Xdebug pour le coverage
          configuration: "phpunit.xml"  # Chemin vers le fichier phpunit.xml
          memory_limit: "256M"  # Limite mémoire si nécessaire
          coverage_text: true  # Générer un rapport de couverture en texte
          coverage_cobertura: "coverage/cobertura.xml"  # Le fichier Cobertura pour la couverture

      # Ajouter le rapport de couverture de code à GitHub en résumé
      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/cobertura.xml  # Le chemin vers le fichier Cobertura généré
          badge: true  # Inclure un badge dans le résumé
          fail_below_min: true  # Échouer si la couverture est en dessous du seuil minimum
          format: markdown  # Format markdown pour le résumé
          hide_branch_rate: false  # Afficher les informations de taux de branches
          hide_complexity: true  # Masquer les informations de complexité
          indicators: true  # Inclure des indicateurs de santé
          output: file  # Sortie dans un fichier
          thresholds: '50 75'  # Seuils de couverture (50% minimum, 75% maximum)

      # Exécuter PHP Mess Detector et ajouter les résultats au résumé
      - name: Run PHP Mess Detector and add results to summary
        uses: php-actions/phpmd@v1
        with:
          path: ./
          output: text
          ruleset: cleancode,code-size,controversial,design,naming,unused-code
          output_file: phpmd_result.txt
          ignore: vendor/
        run: |
          echo "## PHP Mess Detector Results" >> $GITHUB_STEP_SUMMARY
          cat phpmd_result.txt >> $GITHUB_STEP_SUMMARY

      # Exécuter PHP Code Sniffer et ajouter les résultats au résumé
      - name: Run PHP Code Sniffer and add results to summary
        uses: php-actions/phpcs@v1
        with:
          path: ./
          standard: PSR12
          report: full
          report_file: phpcs_result.txt
          ignore: vendor/
        run: |
          echo "## PHP Code Sniffer Results" >> $GITHUB_STEP_SUMMARY
          cat phpcs_result.txt >> $GITHUB_STEP_SUMMARY

      # PHPStan Static Analysis et ajouter les résultats au résumé
      - name: Run PHPStan and add results to summary
        uses: php-actions/phpstan@v1
        with:
          path: ./
          level: max
          memory_limit: 256M
          error_format: github
          configuration: phpstan.neon
        run: |
          echo "## PHPStan Results" >> $GITHUB_STEP_SUMMARY
          cat phpstan_result.txt >> $GITHUB_STEP_SUMMARY
